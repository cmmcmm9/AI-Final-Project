

import Tree.Tree;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Colby
 */
public class Gui extends javax.swing.JFrame {
    public Tree myTree = new Tree();
    
    /**
     * Creates new form NewJFrame
     */
    public Gui() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(213, 255, 243));
    }

    /**
     * Method to populate the combo box selection with the given upc's in a string array.
     * @param upc String array containing all of the UPC's to display in the combox box.
     */
    private void populateItemCodes(String[] upc){
        if(jComboBox2.getItemCount() >= 100){
            jComboBox2.removeAllItems();
        }
        for (String s : upc) {
            jComboBox2.addItem(s);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jComboBox2 = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));
        setForeground(java.awt.Color.blue);

        jLabel2.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel2.setText("Please Select the Item Code:");

        jButton1.setFont(new java.awt.Font("Century Gothic", 0, 11)); // NOI18N
        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(199, 237, 228));

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setLabelFor(this);
        jLabel1.setText("UPC Finder");
        jLabel1.setToolTipText("");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(138, 138, 138)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(142, 142, 142))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Polar", "Coca-Cola", "Hood", "Frito", "Nabisco", "Pepsi" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jComboBox1.setSelectedIndex(0);

        jLabel3.setFont(new java.awt.Font("Century Gothic", 0, 14)); // NOI18N
        jLabel3.setText("Please Select the Manufacturer:");

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);
        jTextArea1.setEditable(false);

        jTabbedPane1.addTab("BFS", jScrollPane1);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        jTabbedPane1.addTab("DFS", jScrollPane2);

        jComboBox2.setMaximumRowCount(10);
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1)
                        .addContainerGap())
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 183, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(116, 116, 116))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handle the "search" button being clicked. Will initiate the DFS and BFS of the
     * selected UPC for the chosen Vendor. Will print out the time taken by the respective algorithm (in milliseconds), the number of
     * nodes visited to find the product, the order the nodes were traversed, and the product description.
     * @param evt
     */
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //string value to be searched for
        String upcSearch = jComboBox2.getSelectedItem().toString();
        //this check is not needed with the new version. This was a user input check
        /*
        if(!upcSearch.matches("[0-9]+") || upcSearch.length() != 5)
        {
            jTextArea1.setText("Please enter a valid item code. Must be 5 digits");
            jTextArea2.setText("Please enter a valid item code. Must be 5 digits");
        }
        else{
        */

        //time the bfs method
        double startTime = System.nanoTime();
        String productDescrip = myTree.bfs(upcSearch);
        double endTime = System.nanoTime();
        double duration = (endTime - startTime)/1000000;
        //reset visited boolean to false for the next search
        myTree.reset(myTree.root);
        //get closedList as a list of strings
        List<String> myclosedList = myTree.getClosedList();
        jTextArea1.setText("The product is: " + productDescrip);
        jTextArea1.append("\nThis search took " + duration + " milli-seconds.");
        jTextArea1.append("\nThe number of nodes visited is: " + myclosedList.size());
        jTextArea1.append("\nThe nodes visited are: \n");
        jTextArea1.setCaretPosition(0);
        //print out closed lists
        for (String value : myclosedList) {
            jTextArea1.append(value + "\n");
        }
        //dfs call
        startTime = System.nanoTime();
        productDescrip = myTree.dfs(upcSearch);
        endTime = System.nanoTime();
        duration = (endTime - startTime)/1000000;
        //reset visited boolean to false for the next search
        myTree.reset(myTree.root);
        //get closedList as a list of strings
        myclosedList = myTree.getClosedList();
        jTextArea2.setText("The product is: " + productDescrip);
        jTextArea2.append("\nThis search took " + duration + " milli-seconds.");
        jTextArea2.append("\nThe number of nodes visited is: " + myclosedList.size());
        jTextArea2.append("\nThe nodes visited are: \n");
        jTextArea2.setCaretPosition(0);
        //print out closed lists
        for (String s : myclosedList) {
            jTextArea2.append(s + "\n");
        }
        //}
        
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * Handle the vendor selection chosen by the user. Will trigger the
     * UPC combo box to populate with new UPC's from the new vendor. Will also
     * populate a new search tree for the selected vendor (given the appropriate CSV) to ensure that the
     * time spent searching by BFS and DFS does not include the time needed to build the tree.
     * @param evt
     */
    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

        String polar = "polar.CSV";
        String coca = "cocacola.CSV";
        String pepsi = "pepsi.CSV";
        String frito = "frito.csv";
        String nabisco = "NABISCO.CSV";
        String hood = "hood.CSV";
        String manufact = Objects.requireNonNull(jComboBox1.getSelectedItem()).toString();
        Map<String, String[]> LargeArray = new HashMap<>();
        //choosing which tree to use, each company has their own search tree
        //needs default value, set to POLAR:
        switch(manufact) {
            case "Polar":
                    try {
                        LargeArray = myTree.loadArray(polar);
                    } catch (IOException ex) {
                        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                String[] upc = LargeArray.get(Tree.upcArray);
                String[] descrip = LargeArray.get(Tree.productDescriptionArray);
                myTree.root = myTree.insertLevelOrder(upc, descrip, myTree.root, 0);
                populateItemCodes(upc);
                break;
            case "Hood":
                    try {
                        LargeArray = myTree.loadArray(hood);
                    } catch (IOException ex) {
                        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                upc = LargeArray.get(Tree.upcArray);
                descrip = LargeArray.get(Tree.productDescriptionArray);
                myTree.root = myTree.insertLevelOrder(upc, descrip, myTree.root, 0);
                populateItemCodes(upc);
                break;
               
            case "Coca-Cola":
                    try {
                        LargeArray = myTree.loadArray(coca);
                    } catch (IOException ex) {
                        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                upc = LargeArray.get(Tree.upcArray);
                descrip = LargeArray.get(Tree.productDescriptionArray);
                myTree.root = myTree.insertLevelOrder(upc, descrip, myTree.root, 0);
                populateItemCodes(upc);
                break;
                
            case "Pepsi":
                    try {
                        LargeArray = myTree.loadArray(pepsi);
                    } catch (IOException ex) {
                        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                upc = LargeArray.get(Tree.upcArray);
                descrip = LargeArray.get(Tree.productDescriptionArray);
                myTree.root = myTree.insertLevelOrder(upc, descrip, myTree.root, 0);
                populateItemCodes(upc);
                break;
                
                
            case "Frito":
                    try {
                        LargeArray = myTree.loadArray(frito);
                    } catch (IOException ex) {
                        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                upc = LargeArray.get(Tree.upcArray);
                descrip = LargeArray.get(Tree.productDescriptionArray);
                myTree.root = myTree.insertLevelOrder(upc, descrip, myTree.root, 0);
                populateItemCodes(upc);
                break;
                 
            case "Nabisco":
                    try {
                        LargeArray = myTree.loadArray(nabisco);
                    } catch (IOException ex) {
                        Logger.getLogger(Gui.class.getName()).log(Level.SEVERE, null, ex);
                    }
                upc = LargeArray.get(Tree.upcArray);
                descrip = LargeArray.get(Tree.productDescriptionArray);
                myTree.root = myTree.insertLevelOrder(upc, descrip, myTree.root, 0);
                populateItemCodes(upc);
                break;   
        }
       
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
    }//GEN-LAST:event_jComboBox2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    // End of variables declaration//GEN-END:variables
}
